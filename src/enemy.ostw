import "mob.ostw";
import "game.ostw";

enum EnemyType {
    BASIC
}

enum PatrolState {
    WAIT,
    APPROACH,
    RETURN
}

enum ActionState {
    NONE,
    BLOCK,
    PREP_STRIKE,
    STRIKE,
    RECOVER_STRIKE
}

globalvar define enemy_slot;

playervar PatrolState patrol_state;
playervar ActionState action_state;
playervar Vector home;
playervar EnemyType enemy_type;
playervar define action_delay;

define MAX_DAMAGE_RANGE: 25;
define BASIC_BLOCK_RANGE: 25;
define BASIC_APPROACH_RANGE: 15;
define BASIC_STRIKE_RANGE: 5;
define BASIC_SPEED: 0.75;
define APPROACH_EPSILON: 2;
define STRIKE_RANGE: 5;
define ROTATION_SPEED: 180;
define PREP_STRIKE_DELAY: 0.25;
define STRIKE_DURATION: 0.5;
define RECOVER_STRIKE_DELAY: 0.5;
define BLOCK_DELAY: 1.5;

rule: "Initialize Enemies"
if (gameState == GameState.Play)
{
    create_enemy(Vector(-18, 0, -32), EnemyType.BASIC);
}

rule: "Basic Enemy: Init"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
{
    patrol_state = PatrolState.WAIT;
    action_state = ActionState.NONE;
    StartScalingPlayer(EventPlayer(), 1.5, false);
    SetMaxHealth(EventPlayer(), 200);
    action_delay = 0;
    ChaseVariableAtRate(action_delay, 0, 1, RateChaseReevaluation.None);

    CreateHudText(
        VisibleTo   : AllPlayers(),
        Header      : <"Patrol State: <0>\nAction State: <1>\nAction Delay: <2>", patrol_state, action_state, action_delay>,
        HeaderColor : Color.LimeGreen,
        Location    : Location.Left,
        Spectators  : Spectators.VisibleNever,
        Reevaluation: HudTextRev.VisibleToAndString,
        SortOrder   : 1
    );
}

rule: "Enemy: Damage Reduction"
Event.OnDamageTaken
if (EventPlayer().Team() == Team.Team1)
if (EventPlayer().DistanceTo(Attacker()) >= MAX_DAMAGE_RANGE)
{
    Heal(EventPlayer(), null, EventDamage());
}

rule: "Basic Enemy: Patrol State: Wait -> Approach"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (patrol_state == PatrolState.WAIT)
if (ClosestPlayerTo(home, Team.Team2).DistanceTo(home) <= BASIC_APPROACH_RANGE)
{
    patrol_state = PatrolState.APPROACH;
    StartThrottleInDirection(EventPlayer(), ClosestPlayerTo(EventPlayer(), Team.Team2).Position() - EventPlayer().Position(), BASIC_SPEED, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
}

rule: "Basic Enemy: Patrol State: Approach -> Return"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (patrol_state == PatrolState.APPROACH)
if (ClosestPlayerTo(home, Team.Team2).DistanceTo(home) > BASIC_APPROACH_RANGE)
{
    patrol_state = PatrolState.RETURN;
    StartThrottleInDirection(EventPlayer(), home - EventPlayer().Position(), BASIC_SPEED, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
    PressButton(EventPlayer(), Button.Ability2);
}

rule: "Basic Enemy: Patrol State: Return -> Wait"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (patrol_state == PatrolState.RETURN)
if (EventPlayer().DistanceTo(home) <= APPROACH_EPSILON)
{
    patrol_state = PatrolState.WAIT;
    StopThrottleInDirection(EventPlayer());
}

rule: "Basic Enemy: Action State: None -> Block"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.NONE)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) <= BASIC_BLOCK_RANGE)
{
    action_state = ActionState.BLOCK;
    StartFacing(EventPlayer(), ClosestPlayerTo(EventPlayer(), Team.Team2).Position() - EventPlayer().EyePosition(), ROTATION_SPEED, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Basic Enemy: Action State: Block -> None"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.BLOCK)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) > BASIC_BLOCK_RANGE)
{
    action_state = ActionState.NONE;
    StopFacing(EventPlayer());
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Basic Enemy: Action State: Block -> Prep Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.BLOCK)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) <= BASIC_STRIKE_RANGE)
if (action_delay <= 0)
{
    action_state = ActionState.PREP_STRIKE;
    action_delay = PREP_STRIKE_DELAY;
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Basic Enemy: Action State: Prep Strike -> Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.PREP_STRIKE)
if (action_delay <= 0)
{
    StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    Wait(RandomReal(0.25, 3.0), WaitBehavior.IgnoreCondition);
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    action_state = ActionState.STRIKE;
}

rule: "Basic Enemy: Action State: Strike -> Recover Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.STRIKE)
if (!EventPlayer().IsFiringPrimary())
{
    action_state = ActionState.RECOVER_STRIKE;
    action_delay = RECOVER_STRIKE_DELAY;
}

rule: "Basic Enemy: Action State: Recover Strike -> Block"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
if (action_state == ActionState.RECOVER_STRIKE)
if (action_delay <= 0)
{
    action_state = ActionState.BLOCK;
    action_delay = BLOCK_DELAY;
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Basic Enemy: Slow During Primary Fire"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (EventPlayer().IsFiringPrimary())
{
    apply_slow(0.15, 0.75);
}

Player create_enemy(Vector location, EnemyType enemy_type) {
    enemy_slot += 1;
    CreateDummyBot(Hero.Reinhardt, Team.Team1, enemy_slot, location);
    define enemy = PlayersInSlot(enemy_slot, Team.Team1);
    enemy.home = location;
    enemy.enemy_type = enemy_type;
    return enemy;
}