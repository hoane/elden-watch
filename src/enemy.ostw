import "mob.ostw";
import "game.ostw";

enum EnemyType {
    NONE,
    BASIC,
    TWIN,
    BOSS
}

enum BehaviorType {
    NONE,
    GUARD,
    BOSS_PHASE_2
}

enum PatrolState {
    WAIT,
    APPROACH,
    ENGAGE,
    RETURN
}

enum ActionState {
    NONE,
    BLOCK,
    PREP_STRIKE,
    STRIKE,
    RECOVER_STRIKE
}

globalvar define enemy_slot;

playervar PatrolState patrol_state;
playervar ActionState action_state;
playervar Vector home;
playervar EnemyType enemy_type;
playervar BehaviorType behavior_type;
playervar define action_delay;

define MAX_DAMAGE_RANGE: 25;
define GUARD_BLOCK_RANGE: 30;
define GUARD_APPROACH_RANGE: 20;
define GUARD_STRIKE_RANGE: 5;
define GUARD_SPEED: 0.75;
define APPROACH_EPSILON: 2;
define STRIKE_RANGE: 5;
define ROTATION_SPEED: 180;
define PREP_STRIKE_DELAY: 0.25;
define STRIKE_DURATION: 0.5;
define RECOVER_STRIKE_DELAY: 0.5;
define BLOCK_DELAY: 1.5;

rule: "Initialize Enemies"
if (game_state == GameState.Play)
{
    create_enemy(Vector(-18, 0, -32), EnemyType.BASIC);
    create_enemy(Vector(-86.7, 0.7, -23.3), EnemyType.TWIN);
    create_enemy(Vector(-86, 0.7, -27.1), EnemyType.TWIN);
    boss_enemy = create_enemy(Vector(-145.5, -2.7, 23.6), EnemyType.BOSS);
}

// START Basic Enemy

rule: "Basic Enemy: Init"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BASIC)
{
    behavior_type = BehaviorType.GUARD;
    poise = 100 * CountOf(AllPlayers(Team.Team2));
    poise_status = PoiseStatus.KNOCKED_DOWN;
    patrol_state = PatrolState.WAIT;
    action_state = ActionState.NONE;

    StartScalingPlayer(EventPlayer(), 1.0, false);
    SetMaxHealth(EventPlayer(), 400 + 200 * CountOf(AllPlayers(Team.Team2)));
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    action_delay = 0;
    ChaseVariableAtRate(action_delay, 0, 1, RateChaseReevaluation.None);

}

rule: "Enemy: Damage Reduction"
Event.OnDamageTaken
if (EventPlayer().Team() == Team.Team1)
{
    define range = EventPlayer().DistanceTo(Attacker());
    if (range >= MAX_DAMAGE_RANGE) {
        Heal(EventPlayer(), null, EventDamage());
    } else {
    }
}

rule: "Guard Behavior: Patrol State: Approach -> Return"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (patrol_state == PatrolState.APPROACH)
if (ClosestPlayerTo(home, Team.Team2).DistanceTo(home) > GUARD_APPROACH_RANGE)
{
    patrol_state = PatrolState.RETURN;
    StartThrottleInDirection(EventPlayer(), home - EventPlayer().Position(), GUARD_SPEED, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
    PressButton(EventPlayer(), Button.Ability2);
}

rule: "Guard Behavior: Patrol State: Approach -> Engage"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (patrol_state == PatrolState.APPROACH)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) <= APPROACH_EPSILON)
{
    patrol_state = PatrolState.ENGAGE;
    StopThrottleInDirection(EventPlayer());
}

rule: "Guard Behavior: Patrol State: Wait | Engage -> Approach"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if ((patrol_state == PatrolState.ENGAGE && (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) > APPROACH_EPSILON)) ||
    (patrol_state == PatrolState.WAIT && (ClosestPlayerTo(home, Team.Team2).DistanceTo(home) <= GUARD_APPROACH_RANGE)))
{
    patrol_state = PatrolState.APPROACH;
    StartThrottleInDirection(EventPlayer(), ClosestPlayerTo(EventPlayer(), Team.Team2).Position() - EventPlayer().Position(), GUARD_SPEED, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
}

rule: "Guard Behavior: Patrol State: Return -> Wait"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (patrol_state == PatrolState.RETURN)
if (EventPlayer().DistanceTo(home) <= APPROACH_EPSILON)
{
    patrol_state = PatrolState.WAIT;
    StopThrottleInDirection(EventPlayer());
}

rule: "Guard Behavior: Action State: None -> Block"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.NONE)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) <= GUARD_BLOCK_RANGE)
{
    action_state = ActionState.BLOCK;
    StartFacing(EventPlayer(), (Up() + ClosestPlayerTo(EventPlayer(), Team.Team2).Position()) - EventPlayer().EyePosition(), ROTATION_SPEED, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Guard Behavior: Action State: Block -> None"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.BLOCK)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) > GUARD_BLOCK_RANGE)
{
    action_state = ActionState.NONE;
    StopFacing(EventPlayer());
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Guard Behavior: Action State: Block -> Prep Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.BLOCK)
if (ClosestPlayerTo(EventPlayer(), Team.Team2).DistanceTo(EventPlayer()) <= GUARD_STRIKE_RANGE)
if (action_delay <= 0)
{
    action_state = ActionState.PREP_STRIKE;
    action_delay = PREP_STRIKE_DELAY;
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Guard Behavior: Action State: Prep Strike -> Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.PREP_STRIKE)
if (action_delay <= 0)
{
    StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    Wait(RandomReal(0.25, 3.0), WaitBehavior.IgnoreCondition);
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    action_state = ActionState.STRIKE;
}

rule: "Guard Behavior: Action State: Strike -> Recover Strike"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.STRIKE)
if (!EventPlayer().IsFiringPrimary())
{
    action_state = ActionState.RECOVER_STRIKE;
    action_delay = RECOVER_STRIKE_DELAY;
}

rule: "Guard Behavior: Action State: Recover Strike -> Block"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (behavior_type == BehaviorType.GUARD)
if (action_state == ActionState.RECOVER_STRIKE)
if (action_delay <= 0)
{
    action_state = ActionState.BLOCK;
    action_delay = BLOCK_DELAY;
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Guard Behavior: Slow During Primary Fire"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (EventPlayer().IsFiringPrimary())
{
    apply_slow(0.15, 0.75);
}

// START Twin Enemy

rule: "Twin Enemy: Init"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.TWIN)
{
    behavior_type = BehaviorType.GUARD;
    poise = 100 * CountOf(AllPlayers(Team.Team2));
    poise_status = PoiseStatus.KNOCKED_DOWN;
    patrol_state = PatrolState.WAIT;
    action_state = ActionState.NONE;

    // SetStatus(EventPlayer(), null, Status.Frozen, 9999);
    StartScalingPlayer(EventPlayer(), 1.0, false);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    SetMaxHealth(EventPlayer(), 150 + 50*CountOf(AllPlayers(Team.Team2)));
    action_delay = 0;
    ChaseVariableAtRate(action_delay, 0, 1, RateChaseReevaluation.None);
}

// START Boss Enemy

rule: "Boss Enemy: Init"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BOSS)
{
    behavior_type = BehaviorType.GUARD;
    poise = 150 * CountOf(AllPlayers(Team.Team2));
    poise_status = PoiseStatus.KNOCKED_DOWN;
    patrol_state = PatrolState.WAIT;
    action_state = ActionState.NONE;

    SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
    StartScalingPlayer(EventPlayer(), 1.3, false);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    SetMaxHealth(EventPlayer(), 800 + 200*CountOf(AllPlayers(Team.Team2)));
    action_delay = 0;
    ChaseVariableAtRate(action_delay, 0, 1, RateChaseReevaluation.None);
}

rule: "Boss Enemy: Enter Phase 2"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team1)
if (enemy_type == EnemyType.BOSS)
if (EventPlayer().Health() <= 1)
{
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
    behavior_type = BehaviorType.NONE;
    game_state = GameState.Cutscene;
}

Player create_enemy(Vector location, EnemyType enemy_type) {
    enemy_slot += 1;
    if (enemy_type == EnemyType.TWIN) {
        CreateDummyBot(Hero.Brigitte, Team.Team1, enemy_slot, location);
    } else {
        CreateDummyBot(Hero.Reinhardt, Team.Team1, enemy_slot, location);
    }
    define enemy = PlayersInSlot(enemy_slot, Team.Team1);
    enemy.home = location;
    enemy.enemy_type = enemy_type;
    return enemy;
}