import "mob.ostw";

playervar define stamina;
playervar define stamina_cooldown;

define MAX_STAMINA: 100;
define STAMINA_REGEN_PS: 29;
define STAMINA_REGEN_DELAY: 1.0;
define PLAYER_POISE: 11;

rule: "Player: Init"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
{
    stamina = 0;
    stamina_cooldown = 0;
    poise = PLAYER_POISE;

    ChaseVariableAtRate(stamina_cooldown, 0, 1, RateChaseReevaluation.None);
    ChaseVariableAtRate(stamina, MAX_STAMINA, stamina_cooldown == 0 ? STAMINA_REGEN_PS : 0, RateChaseReevaluation.DestinationAndRate);

    CreateProgressBarHudText(
        VisibleTo: EventPlayer(),
        Value: stamina,
        Text: "Stamina",
        Location: Location.Left,
        SortOrder: 0,
        ProgressBarColor: Color.Green,
        TextColor: Color.Green,
        Reevaluation: ProgressBarHudEvaluation.Values,
        NonteamSpectators: Spectators.VisibleNever
    );
}

rule:  "Player: Stamina Empty"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (stamina <= 0)
{
    SetAbility1Enabled(EventPlayer(), false);
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
    SetReloadEnabled(EventPlayer(), false);
}

rule: "Player: Stamina Non-Empty"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (stamina > 0)
{
    SetAbility1Enabled(EventPlayer(), true);
    SetPrimaryFireEnabled(EventPlayer(), true);
    SetSecondaryFireEnabled(EventPlayer(), true);
    SetReloadEnabled(EventPlayer(), true);
}

rule: "Player: Primary Fire"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (EventPlayer().IsFiringPrimary())
{
    drainStamina(28);
    apply_slow(0.35, 0.5);
}

rule: "Player: Secondary Fire"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (EventPlayer().IsFiringSecondary())
{
    drainStamina(71);
    apply_slow(0.8, 0.1);
}

rule: "Player: Roll Active"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (EventPlayer().IsUsingAbility1())
{
    drainStamina(18);
    SetDamageReceived(EventPlayer(), 0);
}

rule: "Player: Roll Inactive"
Event.OngoingPlayer
if (EventPlayer().Team() == Team.Team2)
if (!EventPlayer().IsUsingAbility1())
{
    SetDamageReceived(EventPlayer(), 100);
}

void drainStamina(define draw) {
    if (draw <= stamina) {
        stamina -= draw;
    } else {
        stamina = 0;
    }
    stamina_cooldown = STAMINA_REGEN_DELAY;
}